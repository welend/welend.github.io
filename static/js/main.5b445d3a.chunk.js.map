{"version":3,"sources":["Item.js","ItemsList.js","App.js","serviceWorker.js","index.js"],"names":["Item","props","item","title","description","action","user","date","ItemsList","items","filteredItems","filter","actionType","displayItems","length","map","key","id","App","useState","setItems","newItem","newItemActionType","setNewItemActionType","newItemTitle","setNewItemTitle","newItemDescription","setNewItemDescription","setActionType","isFormVisible","setFormVisibility","className","data-onsuccess","onClick","onSubmit","e","preventDefault","Date","toDateString","submitForm","htmlFor","type","name","value","onChange","target","placeholder","required","cols","rows","href","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5b445d3a.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Item(props) {\r\n    return (\r\n        <div>\r\n            <h4>{props.item.title}</h4>\r\n            {props.item.description \r\n                ? <p>{props.item.description}</p> \r\n                : null}\r\n            <small>\r\n                {props.item.action === \"borrow\" \r\n                    ? \"Borrowed from \"\r\n                    : \"Lent to \"\r\n                } {props.item.user} · {props.item.date}\r\n            </small>\r\n            <hr />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Item;","import React from \"react\";\r\nimport Item from \"./Item.js\";\r\n\r\nfunction ItemsList(props) {\r\n  //const items = props.items.reverse();\r\n  const items = props.items;\r\n  const filteredItems = items.filter(item => item.action === props.actionType);\r\n  const displayItems = props.actionType === \"all\" ? items : filteredItems;\r\n  \r\n  return (\r\n    <>\r\n      {displayItems.length <= 0 ? <p>Aún no hay items</p> : null}\r\n      {displayItems.map(item => {\r\n        return (\r\n          <Item item={item} key={item.id}/>\r\n        );\r\n      })}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default ItemsList;","import React, { useState } from 'react';\r\nimport './App.scss';\r\n//import jsonItems from \"./items.json\";\r\nimport ItemsList from \"./ItemsList\";\r\n//import AddNewItem from './AddNewItem';\r\n//import ls from 'local-storage';\r\n\r\nfunction App() {\r\n  //Get items from JSON\r\n  const [items, setItems] = useState([]);//jsonItems was replaced by []\r\n  \r\n  //Add New Item\r\n  const newItem = {};\r\n  const [newItemActionType, setNewItemActionType] = useState(\"\");\r\n  const [newItemTitle, setNewItemTitle] = useState(\"\");\r\n  const [newItemDescription, setNewItemDescription] = useState(\"\");\r\n  const submitForm = (e) => {\r\n      e.preventDefault();\r\n\r\n      newItem.id = items.length + 1;\r\n      newItem.title = newItemTitle;\r\n      newItem.action = newItemActionType;\r\n      newItem.date = (new Date()).toDateString();\r\n      newItem.user = \"user (TBD)\"\r\n      newItem.description = newItemDescription;\r\n\r\n      setItems([...items, newItem]);\r\n\r\n      //Reset form fields\r\n      setNewItemTitle(\"\");\r\n      setNewItemDescription(\"\");\r\n      setNewItemDescription(\"\");\r\n      setFormVisibility(!isFormVisible);\r\n  }\r\n\r\n  //filter by action type\r\n  const[actionType, setActionType] = useState(\"all\");\r\n\r\n  //toggle form\r\n  const [isFormVisible, setFormVisibility] = useState(false);\r\n\r\n  //sign in\r\n  function onSignIn(googleUser) {\r\n    var profile = googleUser.getBasicProfile();\r\n    console.log('ID: ' + profile.getId()); // Do not send to your backend! Use an ID token instead.\r\n    console.log('Name: ' + profile.getName());\r\n    console.log('Image URL: ' + profile.getImageUrl());\r\n    console.log('Email: ' + profile.getEmail()); // This is null if the 'email' scope is not present.\r\n  }\r\n\r\n  return (\r\n    <div className=\"App container\">\r\n      <div className=\"g-signin2\" data-onsuccess=\"onSignIn\"></div>\r\n      <hr/>\r\n      {/* <div className=\"left\"> */}\r\n\r\n      {/* <header className=\"App-header\">\r\n        <h1>Presta</h1>\r\n      </header> */}\r\n\r\n      {/* <AddNewItem/> */}\r\n      \r\n      <button \r\n        className=\"button--add-item button button--blue\"\r\n        onClick={() => setFormVisibility(!isFormVisible)}>\r\n        {/* {isFormVisible ? \"Close\" : \"+\"} */}\r\n        <i>+</i>\r\n      </button>\r\n      <section className={isFormVisible ? \"add-new-item expanded\" : \"add-new-item collapsed\"}>\r\n        <button\r\n          className=\"button button--close\"\r\n          onClick={() => setFormVisibility(!isFormVisible)}\r\n          >\r\n            <i>+</i>\r\n        </button>\r\n        <form \r\n          className=\"container\"\r\n          onSubmit={e => submitForm(e)}>\r\n            <h3>Hey, Usuario</h3>\r\n            <p>Quiero</p>\r\n            <label htmlFor=\"lend\">\r\n                <input type=\"radio\" \r\n                    name=\"actionType\" \r\n                    value=\"lend\"\r\n                    id=\"lend\"\r\n                    onChange={e => setNewItemActionType(e.target.value)}\r\n                    />Prestarte\r\n            </label>\r\n            <label htmlFor=\"borrow\">\r\n                <input type=\"radio\" \r\n                    name=\"actionType\" \r\n                    value=\"borrow\"\r\n                    id=\"borrow\"\r\n                    onChange={e => setNewItemActionType(e.target.value)}\r\n                    />Pedirte\r\n            </label><br/>\r\n            <p>Este item: </p>\r\n            <input type=\"text\" \r\n                placeholder=\"Título\" \r\n                value={newItemTitle}\r\n                onChange={e => setNewItemTitle(e.target.value)}\r\n                required/><br/>\r\n            <label htmlFor=\"description\">\r\n                <span>Descripción</span><br/>\r\n                <textarea \r\n                    name=\"description\" \r\n                    id=\"description\"\r\n                    value={newItemDescription}\r\n                    onChange={e => setNewItemDescription(e.target.value)} \r\n                    cols=\"30\" rows=\"10\" placeholder=\"Agregar descripción\"></textarea>\r\n            </label> <br/>\r\n            <button \r\n              className=\"button button--blue button--text\" \r\n              type=\"submit\"\r\n              >\r\n              Enviar\r\n            </button>\r\n        </form>\r\n      </section>\r\n\r\n      {/* </div> */}\r\n\r\n      {/* <div className=\"right\"> */}\r\n      \r\n      <nav>\r\n        <a href=\"#\" \r\n          onClick={e => setActionType(\"all\")} \r\n          className={actionType === \"all\" ? \"active\" : null}>Todos</a>\r\n        <a href=\"#\" \r\n          onClick={e => setActionType(\"lend\")}\r\n          className={actionType === \"lend\" ? \"active\" : null}>Prestados</a>\r\n        <a href=\"#\" \r\n          onClick={e => setActionType(\"borrow\")}\r\n          className={actionType === \"borrow\" ? \"active\" : null}>Pedidos</a>\r\n      </nav>\r\n\r\n      {/* ITEMS LIST */}\r\n      <ItemsList items={items} actionType={actionType}/>\r\n      \r\n\r\n      {/* </div> */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}